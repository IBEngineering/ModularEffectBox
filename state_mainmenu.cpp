/*
 * state_mainmenu.cpp
 *
 *  Created on: 29 dec. 2017
 *      Author: MisterCavespider
 */

#include "state_mainmenu.h"

#define TIME_TILL_SLEEP 3000

// This should be declared somewhere else
#define ibe_med_width 64
#define ibe_med_height 34
static const uint8_t ibe_med_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0xfc, 0xff, 0x03, 0xfc, 0xff, 0x0f,
   0xf0, 0x3f, 0xfc, 0xff, 0x03, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf0, 0x3f, 0xfc, 0xff, 0x0f, 0xfc, 0xff, 0x0f, 0xf0, 0x3f, 0xfc, 0xff,
   0x0f, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xf0, 0xc3,
   0x0f, 0xf0, 0x03, 0x00, 0xc0, 0x0f, 0xf0, 0xc3, 0x0f, 0xf0, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xf0, 0xff, 0x03, 0xf0, 0xff, 0x03,
   0xc0, 0x0f, 0xf0, 0xff, 0x03, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x0f, 0xf0, 0xff, 0x03, 0xf0, 0xff, 0x03, 0xc0, 0x0f, 0xf0, 0xff,
   0x03, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xf0, 0xc3,
   0x0f, 0xf0, 0x03, 0x00, 0xc0, 0x0f, 0xf0, 0xc3, 0x0f, 0xf0, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0xfc, 0xff, 0x0f, 0xfc, 0xff, 0x0f,
   0xf0, 0x3f, 0xfc, 0xff, 0x0f, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf0, 0x3f, 0xfc, 0xff, 0x03, 0xfc, 0xff, 0x0f, 0xf0, 0x3f, 0xfc, 0xff,
   0x03, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Name of project + formatting
#define PROJECT_STRING	"-==[ModBox]==-"

bool logo = true;

void MainMenuState::setup()
{
	encc1->r.write(0);
	encc2->r.write(0);
	encc3->r.write(0);

	if(logo)
	{
		u8g2->drawXBMP(32, 8, ibe_med_width, ibe_med_height, ibe_med_bits);

		uint8_t w = u8g2->getStrWidth(PROJECT_STRING);
		u8g2->setCursor((128-(w+1))/2, 50);
		u8g2->print(PROJECT_STRING);
	}
	else
	{
		uint8_t n = 14;
		uint8_t i;

		uint8_t w = u8g2->getStrWidth(PROJECT_STRING);
		u8g2->setCursor((128-w)/2, 6);
		u8g2->print(PROJECT_STRING);
		u8g2->drawHLine((128-w)/2-1, 8, w+2);

		for(i = 1; i < stateManager->size; i++)
		{
			u8g2->setCursor(1, n+=6);
			u8g2->print(stateManager->states[i]->title);
		}
	}

	currselect = -1;
	lastselect = -1;
}

void MainMenuState::loop()
{
	if(logo)
	{
		if(PRESSEDP(encc1) || PRESSEDP(encc2) || PRESSEDP(encc3)
				|| encc1->r.read() || encc2->r.read() || encc3->r.read())
		{
			logo = false;
			u8g2->clearBuffer();
			time = 0;	// Reset timer
			setup();
		}
	}
	else
	{
		currselect = -1;	// Invalidate
		int32_t read = encc3->r.read()/4;
		if(read >= 0 && read < stateManager->size - 1)	// -1 because MainMenu
		{
			currselect = read;
		}
		else if(read >= stateManager->size - 1)
		{
			encc3->r.write(stateManager->size - 2);
		}
		else
		{
			encc3->r.write(0);
		}

		// Check if pressed
		if(PRESSEDP(encc3) > 0)
		{
			u8g2->clearBuffer();
			time = 0;	// Reset timer
			stateManager->setCurrentState(currselect+1);	// +1 because MainMenu
			stateManager->setup();
			return;
		}

		// Not pressed? update the screen
		if(currselect != lastselect)
		{
			// Remove last select
			if(lastselect >= 0 && lastselect < stateManager->size - 1)
			{
				u8g2->setDrawColor(2);
				u8g2->drawBox(0, 14 + 6*lastselect, 128, 7);
				u8g2->setDrawColor(1);
			}

			// Set new select
			if(currselect >= 0 && currselect < stateManager->size - 1)
			{
				u8g2->setDrawColor(2);
				u8g2->drawBox(0, 14 + 6*currselect, 128, 7);
				u8g2->setDrawColor(1);
			}

			time = 0;	// Reset timer
		}

		// No changes? Has it fallen asleep?
		if(time > TIME_TILL_SLEEP)
		{
			logo = true;
			u8g2->clearBuffer();
			time = 0;	// Reset timer
			setup();
		}

		lastselect = currselect;
	}
}

MainMenuState::~MainMenuState()
{
}

